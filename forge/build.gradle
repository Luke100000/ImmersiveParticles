plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "immersive_particles.mixin.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "META-INF/mods.toml", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"

    // Replace classes with forge's version
    exclude "dev/architectury/core/block/ArchitecturyLiquidBlock.class"
    exclude "dev/architectury/core/fluid/ArchitecturyFlowingFluid.class"
    exclude 'dev/architectury/core/fluid/ArchitecturyFlowingFluid$Source.class'
    exclude 'dev/architectury/core/fluid/ArchitecturyFlowingFluid$Flowing.class'
    exclude 'dev/architectury/core/item/ArchitecturyBucketItem.class'
    exclude 'dev/architectury/core/item/ArchitecturyMobBucketItem.class'
    relocate "dev.architectury.core.block.forge.imitator", "dev.architectury.core.block"
    relocate "dev.architectury.core.fluid.forge.imitator", "dev.architectury.core.fluid"
    relocate "dev.architectury.core.item.forge.imitator", "dev.architectury.core.item"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude "immersive_particles.accessWidener"
            }
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}